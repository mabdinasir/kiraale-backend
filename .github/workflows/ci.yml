name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
        types: [closed]

env:
    ECR_REPO: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}
    ECR_REPO_NAME: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_NAME }}
    CLUSTER: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }}
    SERVICE: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }}
    TASK_DEF: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_TASK_DEFINITION }}

jobs:
    lint-and-format:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install Bun
              run: curl -fsSL https://bun.sh/install | bash
              env:
                  BUN_INSTALL: /home/runner/.bun

            - name: Add Bun to PATH
              run: echo "/home/runner/.bun/bin" >> $GITHUB_PATH

            - name: Install dependencies
              run: bun install

            - name: Run ESLint
              run: bun run lint

            - name: Run Prettier
              run: bun run fmt:check

    build-and-deploy:
        runs-on: ubuntu-latest
        needs: lint-and-format
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Setup Docker Buildx with caching
            - uses: docker/setup-buildx-action@v2
              with:
                  driver-opts: |
                      image=moby/buildkit:latest
                      network=host

            - uses: aws-actions/amazon-ecr-login@v2

            # Multi-platform build with caching
            - name: Build and Push Docker Image
              run: |
                  IMAGE_TAG=$(date +%s)
                  echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

                  docker buildx build \
                    --platform linux/arm64,linux/amd64 \
                    -t $ECR_REPO:$IMAGE_TAG \
                    -t $ECR_REPO:latest \
                    --cache-from type=registry,ref=$ECR_REPO:buildcache \
                    --cache-to type=registry,ref=$ECR_REPO:buildcache,mode=max \
                    --push .

            # Cleanup old images (keep last 3)
            - name: Prune Old Images
              run: |
                  # Delete all but last 3 tagged images
                  aws ecr list-images \
                    --repository-name $ECR_REPO_NAME \
                    --query 'imageIds[?type(imageTag)!=`null`].imageTag' \
                    --output text \
                    | sort -r \
                    | tail -n +4 \
                    | xargs -I {} aws ecr batch-delete-image \
                        --repository-name $ECR_REPO_NAME \
                        --image-ids imageTag={}

                  # Remove untagged layers
                  aws ecr batch-delete-image \
                    --repository-name $ECR_REPO_NAME \
                    --image-ids "$(aws ecr list-images \
                      --repository-name $ECR_REPO_NAME \
                      --filter "tagStatus=UNTAGGED" \
                      --query 'imageIds' \
                      --output json)"

            # Get current task definition and update image only
            - name: Update ECS Task Definition
              run: |
                  # Get current task definition
                  TASK_DEFINITION=$(aws ecs describe-task-definition \
                    --task-definition $TASK_DEF \
                    --query 'taskDefinition')

                  # Create new task definition with updated image
                  echo $TASK_DEFINITION | jq \
                    --arg IMAGE_URI "$ECR_REPO:$IMAGE_TAG" \
                    'del(.status, .taskDefinitionArn, .revision, 
                         .requiresAttributes, .compatibilities, 
                         .registeredAt, .registeredBy) |
                    .containerDefinitions[0].image = $IMAGE_URI' > new-task-def.json

                  # Register new task definition
                  NEW_TASK_ARN=$(aws ecs register-task-definition \
                    --cli-input-json file://new-task-def.json \
                    --query "taskDefinition.taskDefinitionArn" \
                    --output text)
                  echo "NEW_TASK_ARN=$NEW_TASK_ARN" >> $GITHUB_ENV

            # Deploy with rollback on failure
            - name: Deploy to ECS
              run: |
                  set -e
                  DEPLOYMENT_ID=$(aws ecs update-service \
                    --cluster $CLUSTER \
                    --service $SERVICE \
                    --task-definition $NEW_TASK_ARN \
                    --force-new-deployment \
                    --query 'service.deployments[?status==`PRIMARY`].id' \
                    --output text)

                  # Wait for deployment to complete
                  aws ecs wait services-stable \
                    --cluster $CLUSTER \
                    --services $SERVICE

                  # Verify deployment succeeded
                  DEPLOYMENT_STATUS=$(aws ecs describe-services \
                    --cluster $CLUSTER \
                    --services $SERVICE \
                    --query 'services[0].deployments[?id==`'$DEPLOYMENT_ID'`].rolloutState' \
                    --output text)

                  if [ "$DEPLOYMENT_STATUS" != "COMPLETED" ]; then
                    echo "Deployment failed! Initiating rollback..."
                    PREVIOUS_TASK=$(aws ecs describe-task-definition \
                      --task-definition $TASK_DEF \
                      --query 'taskDefinition.taskDefinitionArn' \
                      --output text)
                    
                    aws ecs update-service \
                      --cluster $CLUSTER \
                      --service $SERVICE \
                      --task-definition $PREVIOUS_TASK \
                      --force-new-deployment
                    exit 1
                  fi
