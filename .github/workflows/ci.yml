name: CI Pipeline

on:
    push:
        branches:
            - main # Trigger only on direct pushes to the main branch
    pull_request:
        branches:
            - main # Trigger when a PR is merged into main
        types:
            - closed # Only trigger on PR closure (merge)

jobs:
    lint-and-format:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install Bun
              run: curl -fsSL https://bun.sh/install | bash
              env:
                  BUN_INSTALL: /home/runner/.bun

            - name: Add Bun to PATH
              run: echo "/home/runner/.bun/bin" >> $GITHUB_PATH

            - name: Install dependencies
              run: bun install

            - name: Run ESLint
              run: bun run lint

            - name: Run Prettier
              run: bun run fmt:check

    build-and-deploy:
        runs-on: ubuntu-latest
        needs: lint-and-format # Ensure linting and formatting complete first

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Set up AWS CLI
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}

            - name: Log in to AWS ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and Push Docker Image
              run: |
                  IMAGE_TAG=$(date +%s)  # Generate a unique timestamp-based tag
                  echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
                  docker build -t ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REPOSITORY_URI }}:$IMAGE_TAG .
                  docker push ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REPOSITORY_URI }}:$IMAGE_TAG

            - name: Get Current Task Definition
              run: |
                  # Fetch the current task definition ARN
                  CURRENT_TASK_DEF=$(aws ecs describe-services \
                    --cluster ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }} \
                    --services ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }} \
                    --query "services[0].taskDefinition" --output text)

                  echo "CURRENT_TASK_DEF=$CURRENT_TASK_DEF" >> $GITHUB_ENV

            - name: Register New ECS Task Definition
              run: |
                  # Get current task definition JSON and remove unwanted fields
                  TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_TASK_DEFINITION }} --query taskDefinition | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

                  # Update the image in the task definition
                  UPDATED_TASK_DEF=$(echo "$TASK_DEFINITION_JSON" | jq --arg IMAGE "${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REPOSITORY_URI }}:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')

                  # Register the updated task definition and capture the new ARN
                  NEW_TASK_REVISION=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query "taskDefinition.taskDefinitionArn" --output text)
                  echo "NEW_TASK_REVISION=$NEW_TASK_REVISION" >> $GITHUB_ENV

            - name: Update ECS Service
              run: |
                  aws ecs update-service \
                    --cluster ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }} \
                    --service ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }} \
                    --task-definition $NEW_TASK_REVISION \
                    --force-new-deployment

            - name: Rollback on Failure
              if: failure()
              run: |
                  echo "Deployment failed! Rolling back to previous task definition: $CURRENT_TASK_DEF"

                  aws ecs update-service \
                    --cluster ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }} \
                    --service ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }} \
                    --task-definition $CURRENT_TASK_DEF \
                    --force-new-deployment
