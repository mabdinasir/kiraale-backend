name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
        types: [closed]

env:
    AWS_REGION: ${{ secrets.AWS_REGION }}
    ECR_REPO: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}
    ECR_REPO_NAME: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_NAME }}
    CLUSTER: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }}
    SERVICE: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }}
    TASK_DEF: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_TASK_DEFINITION }}

jobs:
    lint-and-format:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cache Bun dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      .bun
                      node_modules
                  key: bun-deps-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      bun-deps-

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install Bun
              run: curl -fsSL https://bun.sh/install | bash
              env:
                  BUN_INSTALL: /home/runner/.bun

            - name: Add Bun to PATH
              run: echo "/home/runner/.bun/bin" >> $GITHUB_PATH

            - name: Install dependencies
              run: bun install

            - name: Run ESLint
              run: bun run lint

            - name: Run Prettier
              run: bun run fmt:check

    build-and-deploy:
        needs: lint-and-format
        runs-on: ubuntu-latest
        environment: production
        steps:
            - uses: actions/checkout@v4

            # Configure AWS credentials FIRST
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            # Setup Docker Buildx with caching
            - uses: docker/setup-buildx-action@v2
              with:
                  driver-opts: |
                      image=moby/buildkit:latest
                      network=host

            # ECR Login AFTER AWS credentials
            - name: Login to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v2

            # Build and push Docker image
            - name: Build and Push Docker Image
              run: |
                  docker buildx build \
                    --platform linux/arm64 \
                    -t $ECR_REPO:latest \
                    --push .

            - name: ECS Service Update
              run: |
                  # Get full task definition ARN
                  TASK_ARN=$(aws ecs describe-task-definition \
                    --task-definition $TASK_DEF \
                    --query 'taskDefinition.taskDefinitionArn' \
                    --output text)

                  # Force new deployment
                  aws ecs update-service \
                    --cluster $CLUSTER \
                    --service $SERVICE \
                    --force-new-deployment \
                    --task-definition $TASK_ARN

                  # Wait for service to stabilize (faster than default)
                  aws ecs wait services-stable \
                    --cluster $CLUSTER \
                    --services $SERVICE \
