name: CI Pipeline

on:
    push:
        branches:
            - main # Trigger only on direct pushes to the main branch
    pull_request:
        branches:
            - main # Trigger when a PR is merged into main
        types:
            - closed # Only trigger on PR closure (merge)

jobs:
    lint-and-format:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install Bun
              run: curl -fsSL https://bun.sh/install | bash
              env:
                  BUN_INSTALL: /home/runner/.bun

            - name: Add Bun to PATH
              run: echo "/home/runner/.bun/bin" >> $GITHUB_PATH

            - name: Install dependencies
              run: bun install

            - name: Run ESLint
              run: bun run lint

            - name: Run Prettier
              run: bun run fmt:check

    build-and-deploy:
        runs-on: ubuntu-latest
        needs: lint-and-format

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Set up AWS CLI
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}

            - name: Log in to AWS ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and Push Docker Image
              run: |
                  IMAGE_TAG=$(date +%s)
                  LATEST_TAG="$IMAGE_TAG:latest"
                  echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
                  echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

                  # Tag the image with the repository URL and the generated tag
                  docker tag eastleigh-real-estate:latest ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}:$IMAGE_TAG

                  # Build and push the Docker image to ECR
                  docker buildx build \
                    --platform linux/arm64 \
                    -t ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}:$IMAGE_TAG \
                    -t ${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}:$LATEST_TAG \
                    --push .

            - name: Update ECS Task Definition
              run: |
                  TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_TASK_DEFINITION }} --query taskDefinition | jq 'del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

                  echo "$TASK_DEFINITION_JSON" | jq --arg IMAGE_URI "${{ secrets.EASTLEIGH_REAL_ESTATE_ECR_REPOSITORY_URI }}:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE_URI' > new-task-def.json

                  echo "$(jq '.containerDefinitions[0].secrets += [
                      {"name": "PORT", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PORT"},
                      {"name": "JWT_SECRET", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:JWT_SECRET"},
                      {"name": "DATABASE_URL", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:DATABASE_URL"},
                      {"name": "PROFILE_PIC_ACCESS_KEY_ID", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROFILE_PIC_ACCESS_KEY_ID"},
                      {"name": "PROFILE_PIC_SECRET_ACCESS_KEY", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROFILE_PIC_SECRET_ACCESS_KEY"},
                      {"name": "PROFILE_PIC_BUCKET_REGION", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROFILE_PIC_BUCKET_REGION"},
                      {"name": "PROFILE_PIC_BUCKET_NAME", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROFILE_PIC_BUCKET_NAME"},
                      {"name": "PROPERTIES_ACCESS_KEY_ID", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROPERTIES_ACCESS_KEY_ID"},
                      {"name": "PROPERTIES_SECRET_ACCESS_KEY", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROPERTIES_SECRET_ACCESS_KEY"},
                      {"name": "PROPERTIES_BUCKET_REGION", "valueFrom": "arn:aws:secretsmanager:${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_REGION }}:your-account-id:secret:PROPERTIES_BUCKET_REGION"}
                    ]' new-task-def.json)" > new-task-def.json

                  NEW_TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)

                  if [ -z "$NEW_TASK_REVISION" ]; then
                    echo "Error: Failed to register new task definition!"
                    exit 1
                  fi

                  echo "NEW_TASK_REVISION=$NEW_TASK_REVISION" >> $GITHUB_ENV

            - name: Deploy to ECS
              run: |
                  aws ecs update-service \
                    --cluster ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }} \
                    --service ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }} \
                    --task-definition $NEW_TASK_REVISION \
                    --force-new-deployment

            - name: Rollback ECS Service (if update fails)
              if: failure()
              run: |
                  PREVIOUS_TASK_REVISION=$(aws ecs describe-task-definition --task-definition ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)

                  if [ -z "$PREVIOUS_TASK_REVISION" ]; then
                    echo "Error: No previous task definition found to rollback to!"
                    exit 1
                  fi

                  echo "Deployment failed! Rolling back to previous task definition: $PREVIOUS_TASK_REVISION"

                  aws ecs update-service \
                    --cluster ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_CLUSTER_NAME }} \
                    --service ${{ secrets.EASTLEIGH_REAL_ESTATE_ECS_SERVICE_NAME }} \
                    --task-definition $PREVIOUS_TASK_REVISION \
                    --force-new-deployment
